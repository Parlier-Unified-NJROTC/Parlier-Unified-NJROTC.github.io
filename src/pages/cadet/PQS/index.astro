---
import Layout from "../../../layouts/Layout.astro";
---



<!-- This would be so much better as a compotent, mabye sevlte or react -->

<!-- TODO: Refactor this once the crisis is over -->

<Layout title="PQS" disableHero>
    <div class="BG555">
        <div class="container">
            <!-- Hero Section -->
            <div class="section-header">
                <h1 class="section-title">Personal Qualification Standards</h1>
                <p class="section-subtitle">
                    Rank Advancement Requirements and Progress Tracking
                </p>
            </div>

            <!-- PDF Document Section -->
            <div class="pdf-section">
                <div class="pdf-card">
                    <div class="pdf-header">
                        <h2 class="pdf-title">PQS Manual</h2>
                        <p class="pdf-subtitle">
                            Official Personal Qualification Standards Document
                        </p>
                    </div>
                    <div class="pdf-preview">
                        <div class="pdf-placeholder">
                            <iframe
                                src="/PDFs/NJROTC-New-Cadet-Unit-Handbook-Draft.pdf#toolbar=0"
                                scrolling="no"
                                width="370px"
                                height="200px"></iframe>
                            <div class="pdf-overlay">
                                <a
                                    class="pdf-button"
                                    target="_blank"
                                    href="/PDFs/NJROTC-New-Cadet-Unit-Handbook-Draft.pdf"
                                    >Fullscreen</a
                                >
                                <a
                                    class="pdf-button"
                                    href="/PDFs/NJROTC-New-Cadet-Unit-Handbook-Draft.pdf"
                                    download>Download</a
                                >
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rank Advancement Progress -->
            <div class="progress-section">
                <h2 class="progress-title">Rank Advancement Progress
                    <button id="edit-progress-toggle" class="pdf-button" style="margin-left:1rem;padding:0.35rem 0.9rem;font-size:0.9rem;">Edit Progress</button>
                </h2>
                <p class="progress-subtitle">
                    Complete all requirements for next rank to advance
                </p>
                <div id="rank-cards-container">
                    <!-- Rank cards will be generated here -->
                </div>
            </div>

            <!-- Additional Resources -->
            <div class="resources-section">
                <h2 class="resources-title">Additional Resources</h2>
                <div class="resources-grid">
                    <a
                        href="/Resources/Knowledge/Orders/"
                        class="resource-card"
                    >
                        <h3>General Orders</h3>
                        <p>Study and practice the 11 General Orders</p>
                    </a>
                    <a href="/Resources/Knowledge/Chain/" class="resource-card">
                        <h3>Chain of Command</h3>
                        <p>Learn the current chain of command structure</p>
                    </a>
                    <a href="/Resources/Knowledge/Ranks/" class="resource-card">
                        <h3>Rank Structure</h3>
                        <p>Study Navy and Marine Corps ranks</p>
                    </a>
                    <a
                        href="/Resources/Knowledge/Alphabet/"
                        class="resource-card"
                    >
                        <h3>Military Alphabet</h3>
                        <p>Learn phonetic alphabet for communications</p>
                    </a>
                </div>
            </div>
        </div>
    </div>

    <style is:global>
        .BG555 {
            background: #000000;
            color: #fafaf5;
            position: relative;
            z-index: 1;
            overflow-x: hidden;
            min-height: 100vh;
        }
        .BG555::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(
                    circle at 20% 50%,
                    rgb(2 60 113 / 40%) 0%,
                    transparent 50%
                ),
                radial-gradient(
                    circle at 80% 20%,
                    rgb(2 60 113 / 40%) 0%,
                    transparent 50%
                );
            z-index: -1;
        }
        .pdf-button {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 0.9rem 1.8rem;
            background: transparent;
            color: #e6b220;
            border: 2px solid #e6b220;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 700;
            transition: all 0.3s ease;
            text-align: center;
            cursor: pointer;
        }
        .pdf-button svg {
            transition: transform 0.3s ease;
        }
        .pdf-button:hover {
            background: #e6b220;
            color: #000000;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(230, 178, 32, 0.4);
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 4rem 2rem;
        }
        .section-header {
            text-align: center;
            margin-bottom: 4rem;
        }
        .section-title {
            font-size: 3rem;
            font-weight: 800;
            margin-bottom: 1rem;
            color: #fafaf5;
            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            position: relative;
            display: inline-block;
        }
        .section-title::after {
            content: "";
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: #e6b220;
            border-radius: 2px;
        }
        .section-subtitle {
            font-size: 1.3rem;
            color: rgba(250, 250, 245, 0.9);
            max-width: 650px;
            margin: 0 auto;
            line-height: 1.6;
        }
        .pdf-section {
            margin-bottom: 4rem;
        }
        .pdf-card {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid rgba(2, 60, 113, 0.7);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
            transition: all 0.4s ease;
        }
        .pdf-card:hover {
            border-color: rgba(230, 178, 32, 0.6);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.7);
            transform: translateY(-5px);
        }
        .pdf-header {
            background: rgba(2, 60, 113, 0.3);
            padding: 1.5rem 2rem;
            border-bottom: 1px solid rgba(2, 60, 113, 0.5);
        }
        .pdf-title {
            color: #e6b220;
            font-size: 1.8rem;
            font-weight: 700;
            margin: 0 0 0.5rem 0;
        }
        .pdf-subtitle {
            color: rgba(250, 250, 245, 0.8);
            margin: 0;
        }
        .pdf-preview {
            padding: 3rem 2rem;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .pdf-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            text-align: center;
        }
        .pdf-placeholder span {
            color: rgba(250, 250, 245, 0.9);
            font-size: 1.1rem;
            font-weight: 600;
        }
        .download-btn {
            background: #e6b220;
            color: #000;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .download-btn:hover {
            background: #f5c542;
            transform: translateY(-2px);
        }
        .progress-section {
            margin-bottom: 4rem;
        }
        .progress-title {
            color: #fafaf5;
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        .progress-subtitle {
            color: rgba(250, 250, 245, 0.8);
            margin-bottom: 2rem;
        }
        .rank-card {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid rgba(2, 60, 113, 0.7);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
            transition: all 0.4s ease;
        }
        .rank-card:hover {
            border-color: rgba(230, 178, 32, 0.4);
        }
        .rank-card.hidden {
            display: none;
        }
        .rank-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(2, 60, 113, 0.5);
        }
        .rank-name {
            color: #e6b220;
            font-size: 1.5rem;
            font-weight: 700;
            margin: 0;
        }
        .status-badge {
            background: #e6b220;
            color: #000;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        .status-badge.locked {
            background: rgba(250, 250, 245, 0.2);
            color: rgba(250, 250, 245, 0.7);
        }
        .requirements-list {
            margin-bottom: 2rem;
        }
        .requirement-item {
            display: flex;
            align-items: flex-start;
            margin-bottom: 1rem;
            padding: 0.75rem;
            border-radius: 8px;
            transition: background 0.3s ease;
        }
        .requirement-item:hover {
            background: rgba(2, 60, 113, 0.2);
        }
        .requirement-checkbox {
            margin-right: 1rem;
            margin-top: 0.25rem;
            width: 20px;
            height: 20px;
            cursor: pointer;
        }
        .requirement-label {
            flex: 1;
            cursor: pointer;
        }
        .requirement-text {
            color: rgba(250, 250, 245, 0.9);
            line-height: 1.5;
        }
        .requirement-checkbox:checked + .requirement-label .requirement-text {
            color: #e6b220;
            text-decoration: line-through;
        }
        .rank-actions {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            align-items: center;
        }
        .advance-btn {
            background: #023c71;
            color: #fafaf5;
            border: 2px solid #023c71;
            padding: 1rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .advance-btn:not(:disabled):hover {
            background: transparent;
            color: #023c71;
        }
        .advance-btn:disabled {
            background: rgba(2, 60, 113, 0.3);
            border-color: rgba(2, 60, 113, 0.5);
            color: rgba(250, 250, 245, 0.5);
            cursor: not-allowed;
        }
        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(2, 60, 113, 0.3);
            border-radius: 4px;
            overflow: hidden;
        }
        .progress-fill {
            height: 100%;
            background: #e6b220;
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        .progress-text {
            color: rgba(250, 250, 245, 0.8);
            font-size: 0.9rem;
            font-weight: 600;
        }
        .resources-section {
            margin-top: 4rem;
        }
        .resources-title {
            color: #fafaf5;
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 2rem;
            text-align: center;
        }
        .resources-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
        }
        .resource-card {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid rgba(2, 60, 113, 0.7);
            border-radius: 12px;
            padding: 1.5rem;
            text-decoration: none;
            color: inherit;
            transition: all 0.3s ease;
        }
        .resource-card:hover {
            border-color: rgba(230, 178, 32, 0.6);
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
        }
        .resource-card h3 {
            color: #e6b220;
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0 0 0.5rem 0;
        }
        .resource-card p {
            color: rgba(250, 250, 245, 0.8);
            margin: 0;
            font-size: 0.9rem;
            line-height: 1.5;
        }
        .switcharoo-btn{
            background: #023c71;
            color: #fafaf5;
            border: 2px solid #023c71;
            padding: 1rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .switcharoo-btn:hover {
            background: transparent;
            color: #023c71;
        }
        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 3rem 1.5rem;
            }
            .section-title {
                font-size: 2.5rem;
            }
            .rank-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            .pdf-header,
            .pdf-preview {
                padding: 1.5rem;
            }
            .rank-card {
                padding: 1.5rem;
            }
        }
        @media (max-width: 480px) {
            .container {
                padding: 2rem 1rem;
            }
            .section-title {
                font-size: 2rem;
            }
            .resources-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>

    <script lang="js">
        // Rank data - easily maintainable and extensible
        const ranks = [
            {
                id: "csa",
                name: "Cadet Seaman Apprentice (C/SA)",
                status: "current",
                requirements: [
                    "4 weeks Time In Grade (TIG) as C/SR",
                    "4 weeks Time In Program (TIP)",
                    "Have all required NJROTC Program forms on file in the Admin Department",
                    "Cadet Seaman Apprentice physical fitness requirements (1 minute plank, 3 push-ups, ¼ mile in 2:30 male & 3:15 female)",
                    "11 General Orders (fill in blank test)",
                    "Knowledge of basic stationary drill (Entering Classroom, Dismissal, Right/Left Face, About Face, Parade Rest, Hand Salute)",
                    "Recommended by platoon commander and approved by Cadet Advancement Review Board and/or SNIS/NSI",
                ],
            },
            {
                id: "csn",
                name: "Cadet Seaman (C/SN)",
                status: "locked",
                requirements: [
                    "4 weeks TIG as Cadet Seaman Apprentice",
                    "8 weeks TIP",
                    "Participated in 3 NJ events (eligible for participation ribbon)",
                    "Complete 1 hour of community service",
                    "Complete the required practical factors for C/SN (1:15 plank, 8 push-ups, ½ mile in 5:15 male & 6:45 female)",
                    "Knowledge of Squad drill (Open/Close Ranks, Dress Right, Cover/Uncover, Mark Time March, Left/Right Step)",
                    "Knowledge of 11 general orders (tested written and verbally)",
                    "Recommended by platoon commander and approved by Cadet Advancement Review Board and/or SNIS/NSI",
                ],
            },
            {
                id: "cpo3",
                name: "Cadet Petty Officer 3rd Class (C/PO3)",
                status: "locked",
                requirements: [
                    "6 weeks as TIG as cadet Seaman",
                    "14 weeks TIP",
                    "Pass rank knowledge test",
                    "Pass Chain Of Command test",
                    "Pass military alphabet test",
                    "5 hours community service",
                    "6 NJ events attended",
                    "Proficient in basic marching drill (Left/Right Flank, To the rear, Column Left/Right, Oblique Left/Right, Extend/Close March)",
                    "Knowledge of AMI questions defined in the CFM & CRM",
                    "Recommended by platoon commander or staff and approved by Cadet Advancement Review Board and/or SNIS/NSI",
                ],
            },
            {
                id: "cpo2",
                name: "Cadet Petty Officer 2nd Class (C/PO2)",
                status: "locked",
                requirements: [
                    "Successfully completed 1 year of NJROTC or be an outstanding freshman. Minimum 22-weeks TIP",
                    "8 weeks as Petty Officer 3rd class",
                    "Participated in 9 NJ events",
                    "10 hours of community service",
                    "Pass Marine rank test",
                    "Knowledge of AMI questions defined in the CFM & CRM",
                    "15 push-ups in 2 minutes (females) 32 push-ups, 2 minutes (males)",
                    "1-mile run in 13:30 (females), 10:30 (males)",
                    "1 minute, 30 seconds plank for both genders",
                    "Proficient in all basic drill enough to teach another cadet",
                    "Recommended by platoon commander, self-recommendation, or staff recommendation and cadet is approved by Cadet Advancement Review Board and the SNIS/NSI",
                ],
            },
            {
                id: "cpo1",
                name: "Cadet Petty Officer 1st Class (C/PO1)",
                status: "locked",
                requirements: [
                    "12 weeks as Petty Officer 2nd class (if done in a year sometime in May or awards ceremony)",
                    "Usually is assigned some sort of responsibility or position of leadership",
                    "Participated in 12 NJ events",
                    "15 hours of community service",
                    "Proficient in Honor Color guard and armed drill",
                    "Proficient guide-on",
                    "Wear uniform whenever asked and have exemplary personal appearance",
                    "Recommended by platoon commander, self-recommendation, or staff recommendation and cadet is approved by Cadet Advancement Review Board and the SNIS/NSI",
                ],
            },
            {
                id: "ccpo",
                name: "Cadet Chief Petty Officer (C/CPO)",
                status: "locked",
                requirements: [
                    "Successfully completed 2 years or NJROTC or be an exceptional sophomore",
                    "12 weeks as Petty Officer 1st class",
                    "Cadet Chief must be in a staff/leadership position",
                    "Recommended advancement from peers and pass the cadet chief review board",
                    "25 hours of community service (eligible for community service ribbon)",
                    "Must be eligible for the exemplary conduct ribbon and the exemplary personal appearance ribbon",
                    "Knowledge of all drill (armed and unarmed) well enough to teach cadets",
                    "Knowledge of colorguard well enough to teach cadets",
                    "Knowledge of guide-on manual",
                    "Knowledge of swords manual",
                    "Knowledge of general orders, ranks, alphabet, chain of command, and navy terminology",
                    "PFA requirements Males are as follows: 10:30 minimum, 1:30 forearm plank minimum, and 32 push-ups minimum",
                    "PFA requirements Females are as follows: 13:30 minimum, 1:30 forearm plank minimum, 15 push-ups minimum",
                ],
            },
            {
                id: "cscpo",
                name: "Cadet Senior Chief Petty Officer (C/SCPO)",
                status: "locked",
                requirements: [
                    "All CPO requirements",
                    "TIG as Cadet Chief Petty Officer for 16 weeks",
                    "Selected by SNSI/NSI, but recommendations could be made",
                ],
            },
            {
                id: "cmcpo",
                name: "Cadet Master Chief Petty Officer (C/MCPO)",
                status: "locked",
                requirements: [
                    "All CPO requirements",
                    "TIG as Cadet Chief Petty Officer for 16 weeks",
                    "Selected by SNSI/NSI, but recommendations could be made",
                    "Selected by seniority and experience",
                ],
            },
        ];

        // Function to generate rank cards
        function generateRankCards() {
            const container = document.getElementById("rank-cards-container");

            ranks.forEach((rank) => {
                const isCurrent = rank.status === "current";
                const isLocked = rank.status === "locked";

                const rankCard = document.createElement("div");
                rankCard.className = `rank-card ${isLocked ? "hidden" : ""}`;
                rankCard.setAttribute("data-rank", rank.id);

                rankCard.innerHTML = `
      <div class="rank-header">
        <h3 class="rank-name">${rank.name}</h3>
        <div class="rank-status">
          <span class="status-badge ${isLocked ? "locked" : ""}">${isCurrent ? "Next Rank" : "Locked"}</span>
        </div>
      </div>
            <div class="requirements-list">
                ${rank.requirements
                        .map(
                                (requirement, index) => `
                    <div class="requirement-item">
                        <input type="checkbox" id="${rank.id}-${index + 1}" class="requirement-checkbox" ${isLocked ? "disabled" : ""} data-original-disabled="${isLocked ? 'true' : 'false'}">
                        <label for="${rank.id}-${index + 1}" class="requirement-label">
                            <span class="requirement-text">${requirement}</span>
                        </label>
                    </div>
                `,
                        )
                        .join("")}
            </div>
            <div class="rank-actions">
                <div>
                        <button class="back-btn switcharoo-btn">&lt; Back</button>
                        <button class="advance-btn" disabled>Advance to Next Rank</button>
                        <button class="fake-it-till-you-make-it switcharoo-btn">Skip ></button>
                </div>
        <div class="progress-bar">
          <div class="progress-fill" style="width: 0%"></div>
        </div>
        <span class="progress-text">0% Complete</span>
      </div>
    `;

                container.appendChild(rankCard);
            });
        }

        // Initialize when DOM is loaded

        // NOTE: IF YOU TRY TO ADD CODE OUTSIDE OF THIS FUNCTION IT WILL NOT WORK
        document.addEventListener("DOMContentLoaded", function () {
            generateRankCards();

            // Your existing progress tracking functionality remains the same
            function initializeProgress() {
                const savedProgress = localStorage.getItem("pqsProgress");
                if (savedProgress) {
                    const progressData = JSON.parse(savedProgress);

                    Object.keys(progressData.checkboxes).forEach(
                        (checkboxId) => {
                            const checkbox =
                                document.getElementById(checkboxId);
                            if (checkbox) {
                                checkbox.checked =
                                    progressData.checkboxes[checkboxId];
                            }
                        },
                    );

                    if (progressData.currentRank) {
                        document
                            .querySelectorAll(".rank-card")
                            .forEach((card) => {
                                card.classList.add("hidden");
                            });

                        const currentRankCard = document.querySelector(
                            `[data-rank="${progressData.currentRank}"]`,
                        );
                        if (currentRankCard) {
                            currentRankCard.classList.remove("hidden");

                            document
                                .querySelectorAll(".rank-card")
                                .forEach((card) => {
                                    const rank = card.getAttribute("data-rank");
                                    const badge =
                                        card.querySelector(".status-badge");
                                    if (
                                        rank !== progressData.currentRank &&
                                        progressData.completedRanks &&
                                        progressData.completedRanks.includes(
                                            rank,
                                        )
                                    ) {
                                        badge.textContent = "Completed";
                                        badge.classList.add("locked");

                                        const checkboxes =
                                            card.querySelectorAll(
                                                ".requirement-checkbox",
                                            );
                                        checkboxes.forEach((checkbox) => {
                                            checkbox.disabled = false;
                                        });
                                    }
                                });

                            const currentBadge =
                                currentRankCard.querySelector(".status-badge");
                            if (currentBadge) {
                                currentBadge.textContent = "Advancing Rank";
                                currentBadge.classList.remove("locked");
                            }

                            const currentCheckboxes =
                                currentRankCard.querySelectorAll(
                                    ".requirement-checkbox",
                                );
                            currentCheckboxes.forEach((checkbox) => {
                                checkbox.disabled = false;
                            });
                        }
                    }
                }
            }

            function saveProgress() {
                const progressData = {
                    checkboxes: {},
                    currentRank: null,
                    completedRanks: [],
                };

                document
                    .querySelectorAll(".requirement-checkbox")
                    .forEach((checkbox) => {
                        progressData.checkboxes[checkbox.id] = checkbox.checked;
                    });

                const rankCards = document.querySelectorAll(".rank-card");
                rankCards.forEach((card) => {
                    const rank = card.getAttribute("data-rank");
                    if (!card.classList.contains("hidden")) {
                        progressData.currentRank = rank;
                    } else {
                        const checkboxes = card.querySelectorAll(
                            ".requirement-checkbox",
                        );
                        const allChecked = Array.from(checkboxes).every(
                            (checkbox) => checkbox.checked,
                        );
                        if (allChecked) {
                            progressData.completedRanks.push(rank);
                        }
                    }
                });

                localStorage.setItem(
                    "pqsProgress",
                    JSON.stringify(progressData),
                );
            }

            function updateProgress() {
                const currentRankCard = document.querySelector(
                    ".rank-card:not(.hidden)",
                );
                if (!currentRankCard) return;

                const checkboxes = currentRankCard.querySelectorAll(
                    ".requirement-checkbox:not(:disabled)",
                );
                const checked = currentRankCard.querySelectorAll(
                    ".requirement-checkbox:not(:disabled):checked",
                );
                const progress = (checked.length / checkboxes.length) * 100;

                const progressFill =
                    currentRankCard.querySelector(".progress-fill");
                const progressText =
                    currentRankCard.querySelector(".progress-text");

                if (progressFill && progressText) {
                    progressFill.style.width = `${progress}%`;
                    progressText.textContent = `${Math.round(progress)}% Complete`;
                }

                const advanceBtn =
                    currentRankCard.querySelector(".advance-btn");
                if (advanceBtn) {
                    advanceBtn.disabled = checked.length !== checkboxes.length;
                }

                saveProgress();
            }

            document
                .querySelectorAll(".requirement-checkbox")
                .forEach((checkbox) => {
                    checkbox.addEventListener("change", updateProgress);
                });

            // Wire advance buttons to use a shared helper
            document.querySelectorAll(".advance-btn").forEach((btn) => {
                btn.addEventListener("click", function (e) {
                    const currentRankCard = e.currentTarget.closest(".rank-card");
                    advanceToNext(currentRankCard, true);
                });
            });

            initializeProgress();
            updateProgress();



            document.getElementById("edit-progress-toggle").addEventListener("click", function () {
            // Show the progress editing UI (if needed)
            document.querySelectorAll(".rank-card").forEach(card => card.classList.remove("hidden"));

            // Forward button: advance to next rank
            document.querySelectorAll(".fake-it-till-you-make-it").forEach((btn) => {
                btn.addEventListener("click", function (e) {
                    const currentRankCard = e.currentTarget.closest(".rank-card");
                    advanceToNext(currentRankCard, false);
                });
            });

            // Back button: go to previous rank if available
            document.querySelectorAll(".back-btn").forEach((btn) => {
                btn.addEventListener("click", function (e) {
                    const currentRankCard = e.currentTarget.closest(".rank-card");
                    const prevRankCard = currentRankCard.previousElementSibling;
                    if (prevRankCard && prevRankCard.classList.contains("rank-card")) {
                        currentRankCard.classList.add("hidden");
                        prevRankCard.classList.remove("hidden");

                        const curBadge = currentRankCard.querySelector(".status-badge");
                        const prevBadge = prevRankCard.querySelector(".status-badge");
                        if (curBadge) {
                            curBadge.textContent = "Locked";
                            curBadge.classList.add("locked");
                        }
                        if (prevBadge) {
                            prevBadge.textContent = "Current Rank";
                            prevBadge.classList.remove("locked");
                        }

                        prevRankCard.querySelectorAll(".requirement-checkbox").forEach((c) => (c.disabled = false));

                        updateProgress();
                        saveProgress();
                    }
                });
            });
        });


            // Helper to advance from the given card to the next rank
            function advanceToNext(currentRankCard, save) {
                if (!currentRankCard) return;
                const nextRankCard = currentRankCard.nextElementSibling;
                if (!nextRankCard || !nextRankCard.classList.contains("rank-card")) return;

                // Mark current as completed and locked
                currentRankCard.classList.add("hidden");
                const curBadge = currentRankCard.querySelector(".status-badge");
                if (curBadge) {
                    curBadge.textContent = "Completed";
                    curBadge.classList.add("locked");
                }

                // Make next available and current
                nextRankCard.classList.remove("hidden");
                const nextBadge = nextRankCard.querySelector(".status-badge");
                if (nextBadge) {
                    nextBadge.textContent = "Current Rank";
                    nextBadge.classList.remove("locked");
                }

                // Enable checkboxes for the next rank
                nextRankCard.querySelectorAll(".requirement-checkbox").forEach((checkbox) => (checkbox.disabled = false));

                if (save) {
                    updateProgress();
                    saveProgress();
                } else {
                    // Even if not saving, update UI progress display
                    updateProgress();
                }
            }
        });
    </script>
</Layout>
